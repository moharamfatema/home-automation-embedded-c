
handlercode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000144  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000198  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000198  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001c8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a1b  00000000  00000000  0000028c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007ad  00000000  00000000  00000ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000049f  00000000  00000000  00001454  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000120  00000000  00000000  000018f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000041b  00000000  00000000  00001a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000035b  00000000  00000000  00001e2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000218a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  64:	0c 94 a0 00 	jmp	0x140	; 0x140 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <fans>:
 *  Author: Fatema Moharam
 */ 
#include "IncFile1.h"
unsigned char fans (void)
{
	unsigned char thermo = USART_Receive();
  6c:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Receive>
	switch (thermo)
  70:	82 36       	cpi	r24, 0x62	; 98
  72:	49 f0       	breq	.+18     	; 0x86 <fans+0x1a>
  74:	83 36       	cpi	r24, 0x63	; 99
  76:	59 f0       	breq	.+22     	; 0x8e <fans+0x22>
  78:	81 36       	cpi	r24, 0x61	; 97
  7a:	71 f4       	brne	.+28     	; 0x98 <fans+0x2c>
	{
		case TEMPLOW:
		PORTB &= ~0x03;
  7c:	88 b3       	in	r24, 0x18	; 24
  7e:	8c 7f       	andi	r24, 0xFC	; 252
  80:	88 bb       	out	0x18, r24	; 24
		return 0;
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	08 95       	ret
		case TEMPMID:
		PORTB |=(1<<0);
  86:	c0 9a       	sbi	0x18, 0	; 24
		PORTB &=~(1<<1);
  88:	c1 98       	cbi	0x18, 1	; 24
		return 1;
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	08 95       	ret
		case TEMPHIGH:
		PORTB |=0x03;
  8e:	88 b3       	in	r24, 0x18	; 24
  90:	83 60       	ori	r24, 0x03	; 3
  92:	88 bb       	out	0x18, r24	; 24
		return 2;
  94:	82 e0       	ldi	r24, 0x02	; 2
  96:	08 95       	ret
		default:
		//PORTB &=~0x03;
		return 0;
  98:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  9a:	08 95       	ret

0000009c <leds>:
unsigned char leds (void)
{
	unsigned char light = USART_Receive();
  9c:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Receive>
	switch (light)
  a0:	85 36       	cpi	r24, 0x65	; 101
  a2:	99 f0       	breq	.+38     	; 0xca <leds+0x2e>
  a4:	18 f4       	brcc	.+6      	; 0xac <leds+0x10>
  a6:	84 36       	cpi	r24, 0x64	; 100
  a8:	b1 f0       	breq	.+44     	; 0xd6 <leds+0x3a>
  aa:	1a c0       	rjmp	.+52     	; 0xe0 <leds+0x44>
  ac:	86 36       	cpi	r24, 0x66	; 102
  ae:	39 f0       	breq	.+14     	; 0xbe <leds+0x22>
  b0:	87 36       	cpi	r24, 0x67	; 103
  b2:	b1 f4       	brne	.+44     	; 0xe0 <leds+0x44>
	{
		case LHIGH:
		PORTA &=~0x07;
  b4:	8b b3       	in	r24, 0x1b	; 27
  b6:	88 7f       	andi	r24, 0xF8	; 248
  b8:	8b bb       	out	0x1b, r24	; 27
		return 0;
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	08 95       	ret
		case LMIDH:
		PORTA |=(1<<0);
  be:	d8 9a       	sbi	0x1b, 0	; 27
		PORTA &=~0x06;
  c0:	8b b3       	in	r24, 0x1b	; 27
  c2:	89 7f       	andi	r24, 0xF9	; 249
  c4:	8b bb       	out	0x1b, r24	; 27
		return 1;
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	08 95       	ret
		case LMIDL:
		PORTA |=0x03;
  ca:	8b b3       	in	r24, 0x1b	; 27
  cc:	83 60       	ori	r24, 0x03	; 3
  ce:	8b bb       	out	0x1b, r24	; 27
		PORTA&=~0x04;
  d0:	da 98       	cbi	0x1b, 2	; 27
		return 2;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	08 95       	ret
		case LLOW:
		PORTA |= 0x07;
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	87 60       	ori	r24, 0x07	; 7
  da:	8b bb       	out	0x1b, r24	; 27
		return 3;
  dc:	83 e0       	ldi	r24, 0x03	; 3
  de:	08 95       	ret
		default:
		//PORTA &=~0x07;
		return 0;
  e0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
  e2:	08 95       	ret

000000e4 <devices>:
unsigned char devices (void)
{
  e4:	cf 93       	push	r28
	unsigned char noOfDev = 0;
	noOfDev +=leds();
  e6:	0e 94 4e 00 	call	0x9c	; 0x9c <leds>
  ea:	c8 2f       	mov	r28, r24
	noOfDev +=fans();
  ec:	0e 94 36 00 	call	0x6c	; 0x6c <fans>
	return noOfDev;
}
  f0:	8c 0f       	add	r24, r28
  f2:	cf 91       	pop	r28
  f4:	08 95       	ret

000000f6 <main>:
void main (void)
{
	
	DDRA |=0x07;
  f6:	8a b3       	in	r24, 0x1a	; 26
  f8:	87 60       	ori	r24, 0x07	; 7
  fa:	8a bb       	out	0x1a, r24	; 26
	DDRB |=0x03;
  fc:	87 b3       	in	r24, 0x17	; 23
  fe:	83 60       	ori	r24, 0x03	; 3
 100:	87 bb       	out	0x17, r24	; 23
	USART_Init(103);
 102:	87 e6       	ldi	r24, 0x67	; 103
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	0e 94 91 00 	call	0x122	; 0x122 <USART_Init>
	unsigned char go;
	//go = USART_Receive();
	//while (!(go == '*'));
	unsigned char devs;
	USART_Transmit(0);
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	0e 94 98 00 	call	0x130	; 0x130 <USART_Transmit>

	while(1)
	{
			do
			{
				go = USART_Receive();
 110:	0e 94 9c 00 	call	0x138	; 0x138 <USART_Receive>
			}while (!(go == '*'));
 114:	8a 32       	cpi	r24, 0x2A	; 42
 116:	e1 f7       	brne	.-8      	; 0x110 <main+0x1a>
	
		devs = devices();
 118:	0e 94 72 00 	call	0xe4	; 0xe4 <devices>
		USART_Transmit(devs);
 11c:	0e 94 98 00 	call	0x130	; 0x130 <USART_Transmit>
	}
 120:	f7 cf       	rjmp	.-18     	; 0x110 <main+0x1a>

00000122 <USART_Init>:
 */ 
#include "IncFile1.h"
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	UBRRH = (unsigned char)(baud>>8);
 122:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
 124:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN);
 126:	88 e1       	ldi	r24, 0x18	; 24
 128:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 1stop bit */
	UCSRC = (1<<URSEL)|(3<<UCSZ0);
 12a:	86 e8       	ldi	r24, 0x86	; 134
 12c:	80 bd       	out	0x20, r24	; 32
 12e:	08 95       	ret

00000130 <USART_Transmit>:
}
void USART_Transmit( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
 130:	5d 9b       	sbis	0x0b, 5	; 11
 132:	fe cf       	rjmp	.-4      	; 0x130 <USART_Transmit>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
 134:	8c b9       	out	0x0c, r24	; 12
 136:	08 95       	ret

00000138 <USART_Receive>:
}
unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
 138:	5f 9b       	sbis	0x0b, 7	; 11
 13a:	fe cf       	rjmp	.-4      	; 0x138 <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
 13c:	8c b1       	in	r24, 0x0c	; 12
}
 13e:	08 95       	ret

00000140 <_exit>:
 140:	f8 94       	cli

00000142 <__stop_program>:
 142:	ff cf       	rjmp	.-2      	; 0x142 <__stop_program>
